org: jjordancallis
app: example-serverless-app
service: example-serverless-app

# Plugin section registers the plugin with the Serverless framework
plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-offline
  
custom:
  wsgi:
    app: app.app
    pythonBin: python3
    packRequirements: false
    # In the custom dockerizePip, we are are stating the plugin(s) to use Docker when installing packages with pip. This will use a docker container that is similar to Lambda, so that the plugins/extensions are compatible.
    # Docker is required.
    dockerizePip: non-linux 
  tableName: 'example-serverless-${self:provider.stage}'
  dynamodb:
    stages:
        - dev
    start:
        port: 8000
        inMemory: true
        migrate: true # auto migrate on dynamodb start
provider:
  name: aws
  runtime: python3.8
  stage: dev
  profile: development
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    DYNAMODB_TABLE: 'example-serverless-${self:provider.stage}'
            
functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: ANY /{proxy+}
      
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: productId
            AttributeType: S
        KeySchema:
          -
            AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
